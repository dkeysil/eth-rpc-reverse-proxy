// Code generated by MockGen. DO NOT EDIT.
// Source: resolver.go

// Package mock_backendresolver is a generated GoMock package.
package mock_backendresolver

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBackendResolver is a mock of BackendResolver interface.
type MockBackendResolver struct {
	ctrl     *gomock.Controller
	recorder *MockBackendResolverMockRecorder
}

// MockBackendResolverMockRecorder is the mock recorder for MockBackendResolver.
type MockBackendResolverMockRecorder struct {
	mock *MockBackendResolver
}

// NewMockBackendResolver creates a new mock instance.
func NewMockBackendResolver(ctrl *gomock.Controller) *MockBackendResolver {
	mock := &MockBackendResolver{ctrl: ctrl}
	mock.recorder = &MockBackendResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackendResolver) EXPECT() *MockBackendResolverMockRecorder {
	return m.recorder
}

// GetEthCallUpstreamHost mocks base method.
func (m *MockBackendResolver) GetEthCallUpstreamHost() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEthCallUpstreamHost")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEthCallUpstreamHost indicates an expected call of GetEthCallUpstreamHost.
func (mr *MockBackendResolverMockRecorder) GetEthCallUpstreamHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEthCallUpstreamHost", reflect.TypeOf((*MockBackendResolver)(nil).GetEthCallUpstreamHost))
}

// GetUpstreamHost mocks base method.
func (m *MockBackendResolver) GetUpstreamHost() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpstreamHost")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUpstreamHost indicates an expected call of GetUpstreamHost.
func (mr *MockBackendResolverMockRecorder) GetUpstreamHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpstreamHost", reflect.TypeOf((*MockBackendResolver)(nil).GetUpstreamHost))
}
